
Simple_Calculator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ea0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000fd0  08000fd0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000fd0  08000fd0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000fd0  08000fd0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fd0  08000fd0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fd0  08000fd0  00010fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fd4  08000fd4  00010fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000020  08000ff8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08000ff8  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f63  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a20  00000000  00000000  00023fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b32  00000000  00000000  000249cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001e0  00000000  00000000  00025500  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000188  00000000  00000000  000256e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000251f  00000000  00000000  00025868  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002326  00000000  00000000  00027d87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000099f7  00000000  00000000  0002a0ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00033aa4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000060c  00000000  00000000  00033b20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000fb8 	.word	0x08000fb8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000fb8 	.word	0x08000fb8

08000170 <main>:
void GPIO_init();

void wait(uint32_t time);

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
	clock_init();
 8000176:	f000 f8d9 	bl	800032c <clock_init>
	LCD_init();
 800017a:	f000 fb2d 	bl	80007d8 <LCD_init>
	Keypad_init();
 800017e:	f000 f92f 	bl	80003e0 <Keypad_init>
	LCD_clear_screen();
 8000182:	f000 fa5f 	bl	8000644 <LCD_clear_screen>
	int32_t num1 = 0 , num2 = 0 , sum = 0;
 8000186:	2300      	movs	r3, #0
 8000188:	617b      	str	r3, [r7, #20]
 800018a:	2300      	movs	r3, #0
 800018c:	613b      	str	r3, [r7, #16]
 800018e:	2300      	movs	r3, #0
 8000190:	60fb      	str	r3, [r7, #12]
	char pressed='A',oper;
 8000192:	2341      	movs	r3, #65	; 0x41
 8000194:	70fb      	strb	r3, [r7, #3]
	uint16_t num1_flag = 0 , num2_flag = 0 ,oper_flag = 0;
 8000196:	2300      	movs	r3, #0
 8000198:	813b      	strh	r3, [r7, #8]
 800019a:	2300      	movs	r3, #0
 800019c:	80fb      	strh	r3, [r7, #6]
 800019e:	2300      	movs	r3, #0
 80001a0:	80bb      	strh	r3, [r7, #4]

	//EXTI_GPIO_Init(EXTIPB9, EXTI_Trigger_RISING, EXTI_IRQ_ENABLE, EXTI9_callback);
	//EXTI_flag=1;
    while (1)
    {
    	pressed=Keypad_getkey();
 80001a2:	f000 f969 	bl	8000478 <Keypad_getkey>
 80001a6:	4603      	mov	r3, r0
 80001a8:	70fb      	strb	r3, [r7, #3]
    	switch(pressed)
 80001aa:	78fb      	ldrb	r3, [r7, #3]
 80001ac:	3b2a      	subs	r3, #42	; 0x2a
 80001ae:	2b17      	cmp	r3, #23
 80001b0:	f200 8091 	bhi.w	80002d6 <main+0x166>
 80001b4:	a201      	add	r2, pc, #4	; (adr r2, 80001bc <main+0x4c>)
 80001b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ba:	bf00      	nop
 80001bc:	08000237 	.word	0x08000237
 80001c0:	08000237 	.word	0x08000237
 80001c4:	080002d7 	.word	0x080002d7
 80001c8:	08000237 	.word	0x08000237
 80001cc:	080002d7 	.word	0x080002d7
 80001d0:	08000237 	.word	0x08000237
 80001d4:	080002d7 	.word	0x080002d7
 80001d8:	080002d7 	.word	0x080002d7
 80001dc:	080002d7 	.word	0x080002d7
 80001e0:	080002d7 	.word	0x080002d7
 80001e4:	080002d7 	.word	0x080002d7
 80001e8:	080002d7 	.word	0x080002d7
 80001ec:	080002d7 	.word	0x080002d7
 80001f0:	080002d7 	.word	0x080002d7
 80001f4:	080002d7 	.word	0x080002d7
 80001f8:	080002d7 	.word	0x080002d7
 80001fc:	080002d7 	.word	0x080002d7
 8000200:	080002d7 	.word	0x080002d7
 8000204:	080002d7 	.word	0x080002d7
 8000208:	08000255 	.word	0x08000255
 800020c:	080002d7 	.word	0x080002d7
 8000210:	0800021d 	.word	0x0800021d
 8000214:	080002d7 	.word	0x080002d7
 8000218:	08000319 	.word	0x08000319
    	{
    	case 'A':
    		break;
    	case '?':
    		LCD_clear_screen();
 800021c:	f000 fa12 	bl	8000644 <LCD_clear_screen>
    		num1 = 0 ;
 8000220:	2300      	movs	r3, #0
 8000222:	617b      	str	r3, [r7, #20]
    		num2 = 0 ;
 8000224:	2300      	movs	r3, #0
 8000226:	613b      	str	r3, [r7, #16]
    		num1_flag = 0 ;
 8000228:	2300      	movs	r3, #0
 800022a:	813b      	strh	r3, [r7, #8]
    		num2_flag = 0 ;
 800022c:	2300      	movs	r3, #0
 800022e:	80fb      	strh	r3, [r7, #6]
    		oper_flag = 0 ;
 8000230:	2300      	movs	r3, #0
 8000232:	80bb      	strh	r3, [r7, #4]
    		break;
 8000234:	e075      	b.n	8000322 <main+0x1b2>
    	case '+':
    	case '-':
    	case '*':
    	case '/':
    		if(oper_flag==0 && num1_flag==1)
 8000236:	88bb      	ldrh	r3, [r7, #4]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d16f      	bne.n	800031c <main+0x1ac>
 800023c:	893b      	ldrh	r3, [r7, #8]
 800023e:	2b01      	cmp	r3, #1
 8000240:	d16c      	bne.n	800031c <main+0x1ac>
    		{
    			LCD_WRITE_CHAR(pressed);
 8000242:	78fb      	ldrb	r3, [r7, #3]
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fb55 	bl	80008f4 <LCD_WRITE_CHAR>
    			oper_flag = 1;
 800024a:	2301      	movs	r3, #1
 800024c:	80bb      	strh	r3, [r7, #4]
    			oper = pressed ;
 800024e:	78fb      	ldrb	r3, [r7, #3]
 8000250:	72fb      	strb	r3, [r7, #11]
    		}
    		break;
 8000252:	e063      	b.n	800031c <main+0x1ac>
    	case '=':
    		if(oper_flag==1 && num1_flag && num2_flag)
 8000254:	88bb      	ldrh	r3, [r7, #4]
 8000256:	2b01      	cmp	r3, #1
 8000258:	d162      	bne.n	8000320 <main+0x1b0>
 800025a:	893b      	ldrh	r3, [r7, #8]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d05f      	beq.n	8000320 <main+0x1b0>
 8000260:	88fb      	ldrh	r3, [r7, #6]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d05c      	beq.n	8000320 <main+0x1b0>
    		{
    			switch(oper)
 8000266:	7afb      	ldrb	r3, [r7, #11]
 8000268:	3b2a      	subs	r3, #42	; 0x2a
 800026a:	2b05      	cmp	r3, #5
 800026c:	d824      	bhi.n	80002b8 <main+0x148>
 800026e:	a201      	add	r2, pc, #4	; (adr r2, 8000274 <main+0x104>)
 8000270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000274:	080002a1 	.word	0x080002a1
 8000278:	0800028d 	.word	0x0800028d
 800027c:	080002b9 	.word	0x080002b9
 8000280:	08000297 	.word	0x08000297
 8000284:	080002b9 	.word	0x080002b9
 8000288:	080002ad 	.word	0x080002ad
    			{
    			case '+':
    				sum=num1+num2 ;
 800028c:	697a      	ldr	r2, [r7, #20]
 800028e:	693b      	ldr	r3, [r7, #16]
 8000290:	4413      	add	r3, r2
 8000292:	60fb      	str	r3, [r7, #12]
    				break;
 8000294:	e010      	b.n	80002b8 <main+0x148>
    			case '-':
    				sum=num1-num2 ;
 8000296:	697a      	ldr	r2, [r7, #20]
 8000298:	693b      	ldr	r3, [r7, #16]
 800029a:	1ad3      	subs	r3, r2, r3
 800029c:	60fb      	str	r3, [r7, #12]
    				break;
 800029e:	e00b      	b.n	80002b8 <main+0x148>
    			case '*':
    				sum=num1*num2 ;
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	693a      	ldr	r2, [r7, #16]
 80002a4:	fb02 f303 	mul.w	r3, r2, r3
 80002a8:	60fb      	str	r3, [r7, #12]
    				break;
 80002aa:	e005      	b.n	80002b8 <main+0x148>
    			case '/':
    				sum=num1/num2 ;
 80002ac:	697a      	ldr	r2, [r7, #20]
 80002ae:	693b      	ldr	r3, [r7, #16]
 80002b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80002b4:	60fb      	str	r3, [r7, #12]
    				break;
 80002b6:	bf00      	nop
    			}
    			LCD_WRITE_CHAR('=');
 80002b8:	203d      	movs	r0, #61	; 0x3d
 80002ba:	f000 fb1b 	bl	80008f4 <LCD_WRITE_CHAR>
    			LCD_WRITE_NUMBER(sum);
 80002be:	68f8      	ldr	r0, [r7, #12]
 80002c0:	f000 fbaa 	bl	8000a18 <LCD_WRITE_NUMBER>
    			num1=sum ;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	617b      	str	r3, [r7, #20]
    			num2 = 0 ;
 80002c8:	2300      	movs	r3, #0
 80002ca:	613b      	str	r3, [r7, #16]
    			oper_flag = 0 ;
 80002cc:	2300      	movs	r3, #0
 80002ce:	80bb      	strh	r3, [r7, #4]
    			num2_flag = 0 ;
 80002d0:	2300      	movs	r3, #0
 80002d2:	80fb      	strh	r3, [r7, #6]
    		}
    		break;
 80002d4:	e024      	b.n	8000320 <main+0x1b0>
		default://numbers
			if(oper_flag==0)//num1
 80002d6:	88bb      	ldrh	r3, [r7, #4]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d10c      	bne.n	80002f6 <main+0x186>
			{
				num1 = ( num1*10 ) + pressed - 48;
 80002dc:	697a      	ldr	r2, [r7, #20]
 80002de:	4613      	mov	r3, r2
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	4413      	add	r3, r2
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	461a      	mov	r2, r3
 80002e8:	78fb      	ldrb	r3, [r7, #3]
 80002ea:	4413      	add	r3, r2
 80002ec:	3b30      	subs	r3, #48	; 0x30
 80002ee:	617b      	str	r3, [r7, #20]
				num1_flag = 1 ;
 80002f0:	2301      	movs	r3, #1
 80002f2:	813b      	strh	r3, [r7, #8]
 80002f4:	e00b      	b.n	800030e <main+0x19e>
			}
			else//num2
			{
				num2 = ( num2*10 ) + pressed - 48 ;
 80002f6:	693a      	ldr	r2, [r7, #16]
 80002f8:	4613      	mov	r3, r2
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	4413      	add	r3, r2
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	461a      	mov	r2, r3
 8000302:	78fb      	ldrb	r3, [r7, #3]
 8000304:	4413      	add	r3, r2
 8000306:	3b30      	subs	r3, #48	; 0x30
 8000308:	613b      	str	r3, [r7, #16]
				num2_flag = 1 ;
 800030a:	2301      	movs	r3, #1
 800030c:	80fb      	strh	r3, [r7, #6]
			}
			LCD_WRITE_CHAR(pressed) ;
 800030e:	78fb      	ldrb	r3, [r7, #3]
 8000310:	4618      	mov	r0, r3
 8000312:	f000 faef 	bl	80008f4 <LCD_WRITE_CHAR>
			break;
 8000316:	e004      	b.n	8000322 <main+0x1b2>
    		break;
 8000318:	bf00      	nop
 800031a:	e002      	b.n	8000322 <main+0x1b2>
    		break;
 800031c:	bf00      	nop
 800031e:	e000      	b.n	8000322 <main+0x1b2>
    		break;
 8000320:	bf00      	nop
    	}
    	wait(50);
 8000322:	2032      	movs	r0, #50	; 0x32
 8000324:	f000 f816 	bl	8000354 <wait>
    	pressed=Keypad_getkey();
 8000328:	e73b      	b.n	80001a2 <main+0x32>
 800032a:	bf00      	nop

0800032c <clock_init>:
    }

}

void clock_init()
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN() 	;
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <clock_init+0x24>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a06      	ldr	r2, [pc, #24]	; (8000350 <clock_init+0x24>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN() 	;
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <clock_init+0x24>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a03      	ldr	r2, [pc, #12]	; (8000350 <clock_init+0x24>)
 8000342:	f043 0308 	orr.w	r3, r3, #8
 8000346:	6193      	str	r3, [r2, #24]

}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr
 8000350:	40021000 	.word	0x40021000

08000354 <wait>:


void wait(uint32_t time)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<time;i++)
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	e00b      	b.n	800037a <wait+0x26>
		for(j=0;j<255;j++);
 8000362:	2300      	movs	r3, #0
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	e002      	b.n	800036e <wait+0x1a>
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	3301      	adds	r3, #1
 800036c:	60bb      	str	r3, [r7, #8]
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	2bfe      	cmp	r3, #254	; 0xfe
 8000372:	d9f9      	bls.n	8000368 <wait+0x14>
	for(i=0;i<time;i++)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	3301      	adds	r3, #1
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	68fa      	ldr	r2, [r7, #12]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	429a      	cmp	r2, r3
 8000380:	d3ef      	bcc.n	8000362 <wait+0xe>
}
 8000382:	bf00      	nop
 8000384:	3714      	adds	r7, #20
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800038c:	480d      	ldr	r0, [pc, #52]	; (80003c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000390:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000394:	480c      	ldr	r0, [pc, #48]	; (80003c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000396:	490d      	ldr	r1, [pc, #52]	; (80003cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000398:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <LoopForever+0xe>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800039c:	e002      	b.n	80003a4 <LoopCopyDataInit>

0800039e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a2:	3304      	adds	r3, #4

080003a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a8:	d3f9      	bcc.n	800039e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003aa:	4a0a      	ldr	r2, [pc, #40]	; (80003d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ac:	4c0a      	ldr	r4, [pc, #40]	; (80003d8 <LoopForever+0x16>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b0:	e001      	b.n	80003b6 <LoopFillZerobss>

080003b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b4:	3204      	adds	r2, #4

080003b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b8:	d3fb      	bcc.n	80003b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ba:	f000 fdd1 	bl	8000f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003be:	f7ff fed7 	bl	8000170 <main>

080003c2 <LoopForever>:

LoopForever:
    b LoopForever
 80003c2:	e7fe      	b.n	80003c2 <LoopForever>
  ldr   r0, =_estack
 80003c4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80003c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003cc:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80003d0:	08000fd8 	.word	0x08000fd8
  ldr r2, =_sbss
 80003d4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80003d8:	20000084 	.word	0x20000084

080003dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003dc:	e7fe      	b.n	80003dc <ADC1_2_IRQHandler>
	...

080003e0 <Keypad_init>:

int Keypad_Row[] = {R0, R1, R2, R3};
int Keypad_Col[] = {C0, C1, C2, C3};

void Keypad_init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 80003e4:	4b22      	ldr	r3, [pc, #136]	; (8000470 <Keypad_init+0x90>)
 80003e6:	2204      	movs	r2, #4
 80003e8:	805a      	strh	r2, [r3, #2]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 80003ea:	4b21      	ldr	r3, [pc, #132]	; (8000470 <Keypad_init+0x90>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	809a      	strh	r2, [r3, #4]
	PINConf.pin_number = R0 ;
 80003f0:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <Keypad_init+0x90>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	801a      	strh	r2, [r3, #0]
	GPIO_Init_ConFig(KEYPAD_PORT, &PINConf) ;
 80003f6:	491e      	ldr	r1, [pc, #120]	; (8000470 <Keypad_init+0x90>)
 80003f8:	481e      	ldr	r0, [pc, #120]	; (8000474 <Keypad_init+0x94>)
 80003fa:	f000 fcf8 	bl	8000dee <GPIO_Init_ConFig>

	PINConf.pin_number = R1 ;
 80003fe:	4b1c      	ldr	r3, [pc, #112]	; (8000470 <Keypad_init+0x90>)
 8000400:	2202      	movs	r2, #2
 8000402:	801a      	strh	r2, [r3, #0]
	GPIO_Init_ConFig(KEYPAD_PORT, &PINConf) ;
 8000404:	491a      	ldr	r1, [pc, #104]	; (8000470 <Keypad_init+0x90>)
 8000406:	481b      	ldr	r0, [pc, #108]	; (8000474 <Keypad_init+0x94>)
 8000408:	f000 fcf1 	bl	8000dee <GPIO_Init_ConFig>

	PINConf.pin_number = R2 ;
 800040c:	4b18      	ldr	r3, [pc, #96]	; (8000470 <Keypad_init+0x90>)
 800040e:	2208      	movs	r2, #8
 8000410:	801a      	strh	r2, [r3, #0]
	GPIO_Init_ConFig(KEYPAD_PORT, &PINConf) ;
 8000412:	4917      	ldr	r1, [pc, #92]	; (8000470 <Keypad_init+0x90>)
 8000414:	4817      	ldr	r0, [pc, #92]	; (8000474 <Keypad_init+0x94>)
 8000416:	f000 fcea 	bl	8000dee <GPIO_Init_ConFig>

	PINConf.pin_number = R3 ;
 800041a:	4b15      	ldr	r3, [pc, #84]	; (8000470 <Keypad_init+0x90>)
 800041c:	2210      	movs	r2, #16
 800041e:	801a      	strh	r2, [r3, #0]
	GPIO_Init_ConFig(KEYPAD_PORT, &PINConf) ;
 8000420:	4913      	ldr	r1, [pc, #76]	; (8000470 <Keypad_init+0x90>)
 8000422:	4814      	ldr	r0, [pc, #80]	; (8000474 <Keypad_init+0x94>)
 8000424:	f000 fce3 	bl	8000dee <GPIO_Init_ConFig>

	PINConf.pin_number = C0 ;
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <Keypad_init+0x90>)
 800042a:	2220      	movs	r2, #32
 800042c:	801a      	strh	r2, [r3, #0]
	GPIO_Init_ConFig(KEYPAD_PORT, &PINConf) ;
 800042e:	4910      	ldr	r1, [pc, #64]	; (8000470 <Keypad_init+0x90>)
 8000430:	4810      	ldr	r0, [pc, #64]	; (8000474 <Keypad_init+0x94>)
 8000432:	f000 fcdc 	bl	8000dee <GPIO_Init_ConFig>

	PINConf.pin_number = C1 ;
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <Keypad_init+0x90>)
 8000438:	2240      	movs	r2, #64	; 0x40
 800043a:	801a      	strh	r2, [r3, #0]
	GPIO_Init_ConFig(KEYPAD_PORT, &PINConf) ;
 800043c:	490c      	ldr	r1, [pc, #48]	; (8000470 <Keypad_init+0x90>)
 800043e:	480d      	ldr	r0, [pc, #52]	; (8000474 <Keypad_init+0x94>)
 8000440:	f000 fcd5 	bl	8000dee <GPIO_Init_ConFig>

	PINConf.pin_number = C2 ;
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <Keypad_init+0x90>)
 8000446:	2280      	movs	r2, #128	; 0x80
 8000448:	801a      	strh	r2, [r3, #0]
	GPIO_Init_ConFig(KEYPAD_PORT, &PINConf) ;
 800044a:	4909      	ldr	r1, [pc, #36]	; (8000470 <Keypad_init+0x90>)
 800044c:	4809      	ldr	r0, [pc, #36]	; (8000474 <Keypad_init+0x94>)
 800044e:	f000 fcce 	bl	8000dee <GPIO_Init_ConFig>

	PINConf.pin_number = C3 ;
 8000452:	4b07      	ldr	r3, [pc, #28]	; (8000470 <Keypad_init+0x90>)
 8000454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000458:	801a      	strh	r2, [r3, #0]
	GPIO_Init_ConFig(KEYPAD_PORT, &PINConf) ;
 800045a:	4905      	ldr	r1, [pc, #20]	; (8000470 <Keypad_init+0x90>)
 800045c:	4805      	ldr	r0, [pc, #20]	; (8000474 <Keypad_init+0x94>)
 800045e:	f000 fcc6 	bl	8000dee <GPIO_Init_ConFig>


	GPIO_WritePort(KEYPAD_PORT, 0xFF) ;
 8000462:	21ff      	movs	r1, #255	; 0xff
 8000464:	4803      	ldr	r0, [pc, #12]	; (8000474 <Keypad_init+0x94>)
 8000466:	f000 fd6c 	bl	8000f42 <GPIO_WritePort>
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	2000003c 	.word	0x2000003c
 8000474:	40010c00 	.word	0x40010c00

08000478 <Keypad_getkey>:

char Keypad_getkey(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
	int i,j;
	//KEYPAD_PORT |=(1<<C0) | (1<<C1) | (1<<C2) | (1<<C3);
	GPIO_WritePin(KEYPAD_PORT, C0,GPIO_PIN_SET);
 800047e:	2201      	movs	r2, #1
 8000480:	2120      	movs	r1, #32
 8000482:	485f      	ldr	r0, [pc, #380]	; (8000600 <Keypad_getkey+0x188>)
 8000484:	f000 fd46 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(KEYPAD_PORT, C1,GPIO_PIN_SET);
 8000488:	2201      	movs	r2, #1
 800048a:	2140      	movs	r1, #64	; 0x40
 800048c:	485c      	ldr	r0, [pc, #368]	; (8000600 <Keypad_getkey+0x188>)
 800048e:	f000 fd41 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(KEYPAD_PORT, C2,GPIO_PIN_SET);
 8000492:	2201      	movs	r2, #1
 8000494:	2180      	movs	r1, #128	; 0x80
 8000496:	485a      	ldr	r0, [pc, #360]	; (8000600 <Keypad_getkey+0x188>)
 8000498:	f000 fd3c 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(KEYPAD_PORT, C3,GPIO_PIN_SET);
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a2:	4857      	ldr	r0, [pc, #348]	; (8000600 <Keypad_getkey+0x188>)
 80004a4:	f000 fd36 	bl	8000f14 <GPIO_WritePin>
	for(i=0;i<4;i++)
 80004a8:	2300      	movs	r3, #0
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	e09f      	b.n	80005ee <Keypad_getkey+0x176>
	{
		//KEYPAD_PORT &= ~(1<<Keypad_Col[i]);
		GPIO_WritePin(KEYPAD_PORT, Keypad_Col[i],GPIO_PIN_RESET);
 80004ae:	4a55      	ldr	r2, [pc, #340]	; (8000604 <Keypad_getkey+0x18c>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	2200      	movs	r2, #0
 80004ba:	4619      	mov	r1, r3
 80004bc:	4850      	ldr	r0, [pc, #320]	; (8000600 <Keypad_getkey+0x188>)
 80004be:	f000 fd29 	bl	8000f14 <GPIO_WritePin>
		for (j=0;j<4;j++)
 80004c2:	2300      	movs	r3, #0
 80004c4:	603b      	str	r3, [r7, #0]
 80004c6:	e081      	b.n	80005cc <Keypad_getkey+0x154>
		{
			if (GPIO_ReadPin(KEYPAD_PORT, Keypad_Row[j]) == 0)
 80004c8:	4a4f      	ldr	r2, [pc, #316]	; (8000608 <Keypad_getkey+0x190>)
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	4619      	mov	r1, r3
 80004d4:	484a      	ldr	r0, [pc, #296]	; (8000600 <Keypad_getkey+0x188>)
 80004d6:	f000 fd06 	bl	8000ee6 <GPIO_ReadPin>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d172      	bne.n	80005c6 <Keypad_getkey+0x14e>
			{
				while(GPIO_ReadPin(KEYPAD_PORT, Keypad_Row[j]) == 0);
 80004e0:	bf00      	nop
 80004e2:	4a49      	ldr	r2, [pc, #292]	; (8000608 <Keypad_getkey+0x190>)
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	4619      	mov	r1, r3
 80004ee:	4844      	ldr	r0, [pc, #272]	; (8000600 <Keypad_getkey+0x188>)
 80004f0:	f000 fcf9 	bl	8000ee6 <GPIO_ReadPin>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f3      	beq.n	80004e2 <Keypad_getkey+0x6a>
				switch(i)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2b03      	cmp	r3, #3
 80004fe:	d862      	bhi.n	80005c6 <Keypad_getkey+0x14e>
 8000500:	a201      	add	r2, pc, #4	; (adr r2, 8000508 <Keypad_getkey+0x90>)
 8000502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000506:	bf00      	nop
 8000508:	08000519 	.word	0x08000519
 800050c:	08000541 	.word	0x08000541
 8000510:	08000569 	.word	0x08000569
 8000514:	08000591 	.word	0x08000591
				{
				case 0:
					if(j==0) return '7';
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d101      	bne.n	8000522 <Keypad_getkey+0xaa>
 800051e:	2337      	movs	r3, #55	; 0x37
 8000520:	e06a      	b.n	80005f8 <Keypad_getkey+0x180>
					else if(j==1) return '4';
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d101      	bne.n	800052c <Keypad_getkey+0xb4>
 8000528:	2334      	movs	r3, #52	; 0x34
 800052a:	e065      	b.n	80005f8 <Keypad_getkey+0x180>
					else if(j==2) return '1';
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	2b02      	cmp	r3, #2
 8000530:	d101      	bne.n	8000536 <Keypad_getkey+0xbe>
 8000532:	2331      	movs	r3, #49	; 0x31
 8000534:	e060      	b.n	80005f8 <Keypad_getkey+0x180>
					else if(j==3) return '?';
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	2b03      	cmp	r3, #3
 800053a:	d13d      	bne.n	80005b8 <Keypad_getkey+0x140>
 800053c:	233f      	movs	r3, #63	; 0x3f
 800053e:	e05b      	b.n	80005f8 <Keypad_getkey+0x180>
					break;
				case 1:
					if(j==0) return '8';
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d101      	bne.n	800054a <Keypad_getkey+0xd2>
 8000546:	2338      	movs	r3, #56	; 0x38
 8000548:	e056      	b.n	80005f8 <Keypad_getkey+0x180>
					else if(j==1) return '5';
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d101      	bne.n	8000554 <Keypad_getkey+0xdc>
 8000550:	2335      	movs	r3, #53	; 0x35
 8000552:	e051      	b.n	80005f8 <Keypad_getkey+0x180>
					else if(j==2) return '2';
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	2b02      	cmp	r3, #2
 8000558:	d101      	bne.n	800055e <Keypad_getkey+0xe6>
 800055a:	2332      	movs	r3, #50	; 0x32
 800055c:	e04c      	b.n	80005f8 <Keypad_getkey+0x180>
					else if(j==3) return '0';
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	2b03      	cmp	r3, #3
 8000562:	d12b      	bne.n	80005bc <Keypad_getkey+0x144>
 8000564:	2330      	movs	r3, #48	; 0x30
 8000566:	e047      	b.n	80005f8 <Keypad_getkey+0x180>
					break;
				case 2:
					if(j==0) return '9';
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d101      	bne.n	8000572 <Keypad_getkey+0xfa>
 800056e:	2339      	movs	r3, #57	; 0x39
 8000570:	e042      	b.n	80005f8 <Keypad_getkey+0x180>
					else if(j==1) return '6';
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d101      	bne.n	800057c <Keypad_getkey+0x104>
 8000578:	2336      	movs	r3, #54	; 0x36
 800057a:	e03d      	b.n	80005f8 <Keypad_getkey+0x180>
					else if(j==2) return '3';
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	2b02      	cmp	r3, #2
 8000580:	d101      	bne.n	8000586 <Keypad_getkey+0x10e>
 8000582:	2333      	movs	r3, #51	; 0x33
 8000584:	e038      	b.n	80005f8 <Keypad_getkey+0x180>
					else if(j==3) return '=';
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	2b03      	cmp	r3, #3
 800058a:	d119      	bne.n	80005c0 <Keypad_getkey+0x148>
 800058c:	233d      	movs	r3, #61	; 0x3d
 800058e:	e033      	b.n	80005f8 <Keypad_getkey+0x180>
					break;
				case 3:
					if(j==0) return '/';
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d101      	bne.n	800059a <Keypad_getkey+0x122>
 8000596:	232f      	movs	r3, #47	; 0x2f
 8000598:	e02e      	b.n	80005f8 <Keypad_getkey+0x180>
					else if(j==1) return '*';
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d101      	bne.n	80005a4 <Keypad_getkey+0x12c>
 80005a0:	232a      	movs	r3, #42	; 0x2a
 80005a2:	e029      	b.n	80005f8 <Keypad_getkey+0x180>
					else if(j==2) return '-';
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d101      	bne.n	80005ae <Keypad_getkey+0x136>
 80005aa:	232d      	movs	r3, #45	; 0x2d
 80005ac:	e024      	b.n	80005f8 <Keypad_getkey+0x180>
					else if(j==3) return '+';
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d107      	bne.n	80005c4 <Keypad_getkey+0x14c>
 80005b4:	232b      	movs	r3, #43	; 0x2b
 80005b6:	e01f      	b.n	80005f8 <Keypad_getkey+0x180>
					break;
 80005b8:	bf00      	nop
 80005ba:	e004      	b.n	80005c6 <Keypad_getkey+0x14e>
					break;
 80005bc:	bf00      	nop
 80005be:	e002      	b.n	80005c6 <Keypad_getkey+0x14e>
					break;
 80005c0:	bf00      	nop
 80005c2:	e000      	b.n	80005c6 <Keypad_getkey+0x14e>
					break;
 80005c4:	bf00      	nop
		for (j=0;j<4;j++)
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	f77f af7a 	ble.w	80004c8 <Keypad_getkey+0x50>
				}
			}
		}
		GPIO_WritePin(KEYPAD_PORT, Keypad_Col[i],GPIO_PIN_SET);
 80005d4:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <Keypad_getkey+0x18c>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	2201      	movs	r2, #1
 80005e0:	4619      	mov	r1, r3
 80005e2:	4807      	ldr	r0, [pc, #28]	; (8000600 <Keypad_getkey+0x188>)
 80005e4:	f000 fc96 	bl	8000f14 <GPIO_WritePin>
	for(i=0;i<4;i++)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	3301      	adds	r3, #1
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b03      	cmp	r3, #3
 80005f2:	f77f af5c 	ble.w	80004ae <Keypad_getkey+0x36>
	}
	return 'A';
 80005f6:	2341      	movs	r3, #65	; 0x41
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40010c00 	.word	0x40010c00
 8000604:	20000010 	.word	0x20000010
 8000608:	20000000 	.word	0x20000000

0800060c <wait_ms>:
 *      Author: Ziad Mahmoud Saad
 */

#include "LCD.h"
#define READ_BIT(reg, bitNum)           ((reg >> bitNum)& 1U)
void wait_ms(uint32_t time) {
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e00b      	b.n	8000632 <wait_ms+0x26>
		for (j = 0; j < 255; j++);
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	e002      	b.n	8000626 <wait_ms+0x1a>
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	3301      	adds	r3, #1
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	2bfe      	cmp	r3, #254	; 0xfe
 800062a:	d9f9      	bls.n	8000620 <wait_ms+0x14>
	for (i = 0; i < time; i++)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	3301      	adds	r3, #1
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	429a      	cmp	r2, r3
 8000638:	d3ef      	bcc.n	800061a <wait_ms+0xe>
}
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <LCD_clear_screen>:

void LCD_clear_screen(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN)	;
 8000648:	2001      	movs	r0, #1
 800064a:	f000 f8e3 	bl	8000814 <LCD_WRITE_COMMAND>
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <LCD_kick>:

void LCD_kick()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET) ;
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065e:	4807      	ldr	r0, [pc, #28]	; (800067c <LCD_kick+0x28>)
 8000660:	f000 fc58 	bl	8000f14 <GPIO_WritePin>
	wait_ms(5);
 8000664:	2005      	movs	r0, #5
 8000666:	f7ff ffd1 	bl	800060c <wait_ms>
	GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET) ;
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <LCD_kick+0x28>)
 8000672:	f000 fc4f 	bl	8000f14 <GPIO_WritePin>

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40010800 	.word	0x40010800

08000680 <LCD_GPIO_init>:


void LCD_GPIO_init()
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	//EN_switch Output
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 8000684:	4b52      	ldr	r3, [pc, #328]	; (80007d0 <LCD_GPIO_init+0x150>)
 8000686:	2204      	movs	r2, #4
 8000688:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = EN_SWITCH ;
 800068a:	4b51      	ldr	r3, [pc, #324]	; (80007d0 <LCD_GPIO_init+0x150>)
 800068c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000690:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 8000692:	4b4f      	ldr	r3, [pc, #316]	; (80007d0 <LCD_GPIO_init+0x150>)
 8000694:	2201      	movs	r2, #1
 8000696:	809a      	strh	r2, [r3, #4]
	GPIO_Init_ConFig(LCD_CTRL, &PINConf) ;
 8000698:	494d      	ldr	r1, [pc, #308]	; (80007d0 <LCD_GPIO_init+0x150>)
 800069a:	484e      	ldr	r0, [pc, #312]	; (80007d4 <LCD_GPIO_init+0x154>)
 800069c:	f000 fba7 	bl	8000dee <GPIO_Init_ConFig>
	//RW_switch Output
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 80006a0:	4b4b      	ldr	r3, [pc, #300]	; (80007d0 <LCD_GPIO_init+0x150>)
 80006a2:	2204      	movs	r2, #4
 80006a4:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = RW_SWITCH ;
 80006a6:	4b4a      	ldr	r3, [pc, #296]	; (80007d0 <LCD_GPIO_init+0x150>)
 80006a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ac:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 80006ae:	4b48      	ldr	r3, [pc, #288]	; (80007d0 <LCD_GPIO_init+0x150>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	809a      	strh	r2, [r3, #4]
	GPIO_Init_ConFig(LCD_CTRL, &PINConf) ;
 80006b4:	4946      	ldr	r1, [pc, #280]	; (80007d0 <LCD_GPIO_init+0x150>)
 80006b6:	4847      	ldr	r0, [pc, #284]	; (80007d4 <LCD_GPIO_init+0x154>)
 80006b8:	f000 fb99 	bl	8000dee <GPIO_Init_ConFig>
	//RS_switch Output
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 80006bc:	4b44      	ldr	r3, [pc, #272]	; (80007d0 <LCD_GPIO_init+0x150>)
 80006be:	2204      	movs	r2, #4
 80006c0:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = RS_SWITCH ;
 80006c2:	4b43      	ldr	r3, [pc, #268]	; (80007d0 <LCD_GPIO_init+0x150>)
 80006c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006c8:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 80006ca:	4b41      	ldr	r3, [pc, #260]	; (80007d0 <LCD_GPIO_init+0x150>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	809a      	strh	r2, [r3, #4]
	GPIO_Init_ConFig(LCD_CTRL, &PINConf) ;
 80006d0:	493f      	ldr	r1, [pc, #252]	; (80007d0 <LCD_GPIO_init+0x150>)
 80006d2:	4840      	ldr	r0, [pc, #256]	; (80007d4 <LCD_GPIO_init+0x154>)
 80006d4:	f000 fb8b 	bl	8000dee <GPIO_Init_ConFig>


	GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET) ;
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006de:	483d      	ldr	r0, [pc, #244]	; (80007d4 <LCD_GPIO_init+0x154>)
 80006e0:	f000 fc18 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET) ;
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ea:	483a      	ldr	r0, [pc, #232]	; (80007d4 <LCD_GPIO_init+0x154>)
 80006ec:	f000 fc12 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET) ;
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f6:	4837      	ldr	r0, [pc, #220]	; (80007d4 <LCD_GPIO_init+0x154>)
 80006f8:	f000 fc0c 	bl	8000f14 <GPIO_WritePin>


	//DATA_PINS are Output
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 80006fc:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <LCD_GPIO_init+0x150>)
 80006fe:	2204      	movs	r2, #4
 8000700:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_0 ;
 8000702:	4b33      	ldr	r3, [pc, #204]	; (80007d0 <LCD_GPIO_init+0x150>)
 8000704:	2201      	movs	r2, #1
 8000706:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 8000708:	4b31      	ldr	r3, [pc, #196]	; (80007d0 <LCD_GPIO_init+0x150>)
 800070a:	2201      	movs	r2, #1
 800070c:	809a      	strh	r2, [r3, #4]
	GPIO_Init_ConFig(LCD_PORT, &PINConf) ;
 800070e:	4930      	ldr	r1, [pc, #192]	; (80007d0 <LCD_GPIO_init+0x150>)
 8000710:	4830      	ldr	r0, [pc, #192]	; (80007d4 <LCD_GPIO_init+0x154>)
 8000712:	f000 fb6c 	bl	8000dee <GPIO_Init_ConFig>

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 8000716:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <LCD_GPIO_init+0x150>)
 8000718:	2204      	movs	r2, #4
 800071a:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_1 ;
 800071c:	4b2c      	ldr	r3, [pc, #176]	; (80007d0 <LCD_GPIO_init+0x150>)
 800071e:	2202      	movs	r2, #2
 8000720:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 8000722:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <LCD_GPIO_init+0x150>)
 8000724:	2201      	movs	r2, #1
 8000726:	809a      	strh	r2, [r3, #4]
	GPIO_Init_ConFig(LCD_PORT, &PINConf) ;
 8000728:	4929      	ldr	r1, [pc, #164]	; (80007d0 <LCD_GPIO_init+0x150>)
 800072a:	482a      	ldr	r0, [pc, #168]	; (80007d4 <LCD_GPIO_init+0x154>)
 800072c:	f000 fb5f 	bl	8000dee <GPIO_Init_ConFig>

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 8000730:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <LCD_GPIO_init+0x150>)
 8000732:	2204      	movs	r2, #4
 8000734:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_2 ;
 8000736:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <LCD_GPIO_init+0x150>)
 8000738:	2204      	movs	r2, #4
 800073a:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 800073c:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <LCD_GPIO_init+0x150>)
 800073e:	2201      	movs	r2, #1
 8000740:	809a      	strh	r2, [r3, #4]
	GPIO_Init_ConFig(LCD_PORT, &PINConf) ;
 8000742:	4923      	ldr	r1, [pc, #140]	; (80007d0 <LCD_GPIO_init+0x150>)
 8000744:	4823      	ldr	r0, [pc, #140]	; (80007d4 <LCD_GPIO_init+0x154>)
 8000746:	f000 fb52 	bl	8000dee <GPIO_Init_ConFig>

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 800074a:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <LCD_GPIO_init+0x150>)
 800074c:	2204      	movs	r2, #4
 800074e:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_3 ;
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <LCD_GPIO_init+0x150>)
 8000752:	2208      	movs	r2, #8
 8000754:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <LCD_GPIO_init+0x150>)
 8000758:	2201      	movs	r2, #1
 800075a:	809a      	strh	r2, [r3, #4]
	GPIO_Init_ConFig(LCD_PORT, &PINConf) ;
 800075c:	491c      	ldr	r1, [pc, #112]	; (80007d0 <LCD_GPIO_init+0x150>)
 800075e:	481d      	ldr	r0, [pc, #116]	; (80007d4 <LCD_GPIO_init+0x154>)
 8000760:	f000 fb45 	bl	8000dee <GPIO_Init_ConFig>


	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 8000764:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <LCD_GPIO_init+0x150>)
 8000766:	2204      	movs	r2, #4
 8000768:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_4 ;
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <LCD_GPIO_init+0x150>)
 800076c:	2210      	movs	r2, #16
 800076e:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <LCD_GPIO_init+0x150>)
 8000772:	2201      	movs	r2, #1
 8000774:	809a      	strh	r2, [r3, #4]
	GPIO_Init_ConFig(LCD_PORT, &PINConf) ;
 8000776:	4916      	ldr	r1, [pc, #88]	; (80007d0 <LCD_GPIO_init+0x150>)
 8000778:	4816      	ldr	r0, [pc, #88]	; (80007d4 <LCD_GPIO_init+0x154>)
 800077a:	f000 fb38 	bl	8000dee <GPIO_Init_ConFig>

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <LCD_GPIO_init+0x150>)
 8000780:	2204      	movs	r2, #4
 8000782:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_5 ;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <LCD_GPIO_init+0x150>)
 8000786:	2220      	movs	r2, #32
 8000788:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <LCD_GPIO_init+0x150>)
 800078c:	2201      	movs	r2, #1
 800078e:	809a      	strh	r2, [r3, #4]
	GPIO_Init_ConFig(LCD_PORT, &PINConf) ;
 8000790:	490f      	ldr	r1, [pc, #60]	; (80007d0 <LCD_GPIO_init+0x150>)
 8000792:	4810      	ldr	r0, [pc, #64]	; (80007d4 <LCD_GPIO_init+0x154>)
 8000794:	f000 fb2b 	bl	8000dee <GPIO_Init_ConFig>

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <LCD_GPIO_init+0x150>)
 800079a:	2204      	movs	r2, #4
 800079c:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_6 ;
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <LCD_GPIO_init+0x150>)
 80007a0:	2240      	movs	r2, #64	; 0x40
 80007a2:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <LCD_GPIO_init+0x150>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	809a      	strh	r2, [r3, #4]
	GPIO_Init_ConFig(LCD_PORT, &PINConf) ;
 80007aa:	4909      	ldr	r1, [pc, #36]	; (80007d0 <LCD_GPIO_init+0x150>)
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <LCD_GPIO_init+0x154>)
 80007ae:	f000 fb1e 	bl	8000dee <GPIO_Init_ConFig>

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <LCD_GPIO_init+0x150>)
 80007b4:	2204      	movs	r2, #4
 80007b6:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_7 ;
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <LCD_GPIO_init+0x150>)
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 80007be:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <LCD_GPIO_init+0x150>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	809a      	strh	r2, [r3, #4]
	GPIO_Init_ConFig(LCD_PORT, &PINConf) ;
 80007c4:	4902      	ldr	r1, [pc, #8]	; (80007d0 <LCD_GPIO_init+0x150>)
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <LCD_GPIO_init+0x154>)
 80007c8:	f000 fb11 	bl	8000dee <GPIO_Init_ConFig>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000003c 	.word	0x2000003c
 80007d4:	40010800 	.word	0x40010800

080007d8 <LCD_init>:

void LCD_init()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	wait_ms(20);
 80007dc:	2014      	movs	r0, #20
 80007de:	f7ff ff15 	bl	800060c <wait_ms>

	LCD_GPIO_init();
 80007e2:	f7ff ff4d 	bl	8000680 <LCD_GPIO_init>
	wait_ms(20);
 80007e6:	2014      	movs	r0, #20
 80007e8:	f7ff ff10 	bl	800060c <wait_ms>
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f000 f811 	bl	8000814 <LCD_WRITE_COMMAND>

	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 80007f2:	2038      	movs	r0, #56	; 0x38
 80007f4:	f000 f80e 	bl	8000814 <LCD_WRITE_COMMAND>
	wait_ms(5);
 80007f8:	2005      	movs	r0, #5
 80007fa:	f7ff ff07 	bl	800060c <wait_ms>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80007fe:	2006      	movs	r0, #6
 8000800:	f000 f808 	bl	8000814 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000804:	2080      	movs	r0, #128	; 0x80
 8000806:	f000 f805 	bl	8000814 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 800080a:	200f      	movs	r0, #15
 800080c:	f000 f802 	bl	8000814 <LCD_WRITE_COMMAND>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <LCD_WRITE_COMMAND>:

void LCD_WRITE_COMMAND(unsigned char command)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	4832      	ldr	r0, [pc, #200]	; (80008f0 <LCD_WRITE_COMMAND+0xdc>)
 8000826:	f000 fb75 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000830:	482f      	ldr	r0, [pc, #188]	; (80008f0 <LCD_WRITE_COMMAND+0xdc>)
 8000832:	f000 fb6f 	bl	8000f14 <GPIO_WritePin>

	GPIO_WritePin(LCD_PORT, GPIO_PIN_0, READ_BIT(command, 0));
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	b2db      	uxtb	r3, r3
 800083e:	461a      	mov	r2, r3
 8000840:	2101      	movs	r1, #1
 8000842:	482b      	ldr	r0, [pc, #172]	; (80008f0 <LCD_WRITE_COMMAND+0xdc>)
 8000844:	f000 fb66 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_1, READ_BIT(command, 1));
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	085b      	lsrs	r3, r3, #1
 800084c:	b2db      	uxtb	r3, r3
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	b2db      	uxtb	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	2102      	movs	r1, #2
 8000858:	4825      	ldr	r0, [pc, #148]	; (80008f0 <LCD_WRITE_COMMAND+0xdc>)
 800085a:	f000 fb5b 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_2, READ_BIT(command, 2));
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	089b      	lsrs	r3, r3, #2
 8000862:	b2db      	uxtb	r3, r3
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	461a      	mov	r2, r3
 800086c:	2104      	movs	r1, #4
 800086e:	4820      	ldr	r0, [pc, #128]	; (80008f0 <LCD_WRITE_COMMAND+0xdc>)
 8000870:	f000 fb50 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_3, READ_BIT(command, 3));
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	08db      	lsrs	r3, r3, #3
 8000878:	b2db      	uxtb	r3, r3
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	b2db      	uxtb	r3, r3
 8000880:	461a      	mov	r2, r3
 8000882:	2108      	movs	r1, #8
 8000884:	481a      	ldr	r0, [pc, #104]	; (80008f0 <LCD_WRITE_COMMAND+0xdc>)
 8000886:	f000 fb45 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_4, READ_BIT(command, 4));
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	091b      	lsrs	r3, r3, #4
 800088e:	b2db      	uxtb	r3, r3
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	b2db      	uxtb	r3, r3
 8000896:	461a      	mov	r2, r3
 8000898:	2110      	movs	r1, #16
 800089a:	4815      	ldr	r0, [pc, #84]	; (80008f0 <LCD_WRITE_COMMAND+0xdc>)
 800089c:	f000 fb3a 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_5, READ_BIT(command, 5));
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	095b      	lsrs	r3, r3, #5
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	461a      	mov	r2, r3
 80008ae:	2120      	movs	r1, #32
 80008b0:	480f      	ldr	r0, [pc, #60]	; (80008f0 <LCD_WRITE_COMMAND+0xdc>)
 80008b2:	f000 fb2f 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_6, READ_BIT(command, 6));
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	099b      	lsrs	r3, r3, #6
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	2140      	movs	r1, #64	; 0x40
 80008c6:	480a      	ldr	r0, [pc, #40]	; (80008f0 <LCD_WRITE_COMMAND+0xdc>)
 80008c8:	f000 fb24 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_7, READ_BIT(command, 7));
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	09db      	lsrs	r3, r3, #7
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	461a      	mov	r2, r3
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <LCD_WRITE_COMMAND+0xdc>)
 80008d8:	f000 fb1c 	bl	8000f14 <GPIO_WritePin>

	wait_ms(1);
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff fe95 	bl	800060c <wait_ms>
	LCD_kick();
 80008e2:	f7ff feb7 	bl	8000654 <LCD_kick>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40010800 	.word	0x40010800

080008f4 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000904:	4832      	ldr	r0, [pc, #200]	; (80009d0 <LCD_WRITE_CHAR+0xdc>)
 8000906:	f000 fb05 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000910:	482f      	ldr	r0, [pc, #188]	; (80009d0 <LCD_WRITE_CHAR+0xdc>)
 8000912:	f000 faff 	bl	8000f14 <GPIO_WritePin>

	GPIO_WritePin(LCD_PORT, GPIO_PIN_0, READ_BIT(character, 0));
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	b2db      	uxtb	r3, r3
 800091e:	461a      	mov	r2, r3
 8000920:	2101      	movs	r1, #1
 8000922:	482b      	ldr	r0, [pc, #172]	; (80009d0 <LCD_WRITE_CHAR+0xdc>)
 8000924:	f000 faf6 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_1, READ_BIT(character, 1));
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	085b      	lsrs	r3, r3, #1
 800092c:	b2db      	uxtb	r3, r3
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	b2db      	uxtb	r3, r3
 8000934:	461a      	mov	r2, r3
 8000936:	2102      	movs	r1, #2
 8000938:	4825      	ldr	r0, [pc, #148]	; (80009d0 <LCD_WRITE_CHAR+0xdc>)
 800093a:	f000 faeb 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_2, READ_BIT(character, 2));
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	089b      	lsrs	r3, r3, #2
 8000942:	b2db      	uxtb	r3, r3
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	b2db      	uxtb	r3, r3
 800094a:	461a      	mov	r2, r3
 800094c:	2104      	movs	r1, #4
 800094e:	4820      	ldr	r0, [pc, #128]	; (80009d0 <LCD_WRITE_CHAR+0xdc>)
 8000950:	f000 fae0 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_3, READ_BIT(character, 3));
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	08db      	lsrs	r3, r3, #3
 8000958:	b2db      	uxtb	r3, r3
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	b2db      	uxtb	r3, r3
 8000960:	461a      	mov	r2, r3
 8000962:	2108      	movs	r1, #8
 8000964:	481a      	ldr	r0, [pc, #104]	; (80009d0 <LCD_WRITE_CHAR+0xdc>)
 8000966:	f000 fad5 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_4, READ_BIT(character, 4));
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	091b      	lsrs	r3, r3, #4
 800096e:	b2db      	uxtb	r3, r3
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	b2db      	uxtb	r3, r3
 8000976:	461a      	mov	r2, r3
 8000978:	2110      	movs	r1, #16
 800097a:	4815      	ldr	r0, [pc, #84]	; (80009d0 <LCD_WRITE_CHAR+0xdc>)
 800097c:	f000 faca 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_5, READ_BIT(character, 5));
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	095b      	lsrs	r3, r3, #5
 8000984:	b2db      	uxtb	r3, r3
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	b2db      	uxtb	r3, r3
 800098c:	461a      	mov	r2, r3
 800098e:	2120      	movs	r1, #32
 8000990:	480f      	ldr	r0, [pc, #60]	; (80009d0 <LCD_WRITE_CHAR+0xdc>)
 8000992:	f000 fabf 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_6, READ_BIT(character, 6));
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	099b      	lsrs	r3, r3, #6
 800099a:	b2db      	uxtb	r3, r3
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	2140      	movs	r1, #64	; 0x40
 80009a6:	480a      	ldr	r0, [pc, #40]	; (80009d0 <LCD_WRITE_CHAR+0xdc>)
 80009a8:	f000 fab4 	bl	8000f14 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_7, READ_BIT(character, 7));
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	09db      	lsrs	r3, r3, #7
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	461a      	mov	r2, r3
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <LCD_WRITE_CHAR+0xdc>)
 80009b8:	f000 faac 	bl	8000f14 <GPIO_WritePin>
	wait_ms(1);
 80009bc:	2001      	movs	r0, #1
 80009be:	f7ff fe25 	bl	800060c <wait_ms>
	LCD_kick();
 80009c2:	f7ff fe47 	bl	8000654 <LCD_kick>


}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40010800 	.word	0x40010800

080009d4 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	460a      	mov	r2, r1
 80009de:	71fb      	strb	r3, [r7, #7]
 80009e0:	4613      	mov	r3, r2
 80009e2:	71bb      	strb	r3, [r7, #6]
	if(line==1 && position>=0 && position<16)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d109      	bne.n	80009fe <LCD_GOTO_XY+0x2a>
 80009ea:	79bb      	ldrb	r3, [r7, #6]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d806      	bhi.n	80009fe <LCD_GOTO_XY+0x2a>
	{
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 80009f0:	79bb      	ldrb	r3, [r7, #6]
 80009f2:	3b80      	subs	r3, #128	; 0x80
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff0c 	bl	8000814 <LCD_WRITE_COMMAND>
	}else if(line==2)
	{
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
	}
}
 80009fc:	e008      	b.n	8000a10 <LCD_GOTO_XY+0x3c>
	}else if(line==2)
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d105      	bne.n	8000a10 <LCD_GOTO_XY+0x3c>
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 8000a04:	79bb      	ldrb	r3, [r7, #6]
 8000a06:	3b40      	subs	r3, #64	; 0x40
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff02 	bl	8000814 <LCD_WRITE_COMMAND>
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <LCD_WRITE_NUMBER>:
	}
}


void LCD_WRITE_NUMBER(int32_t num)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b098      	sub	sp, #96	; 0x60
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	int count=0,count2,max=0,temp,number[16]={0};
 8000a20:	2300      	movs	r3, #0
 8000a22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a24:	2300      	movs	r3, #0
 8000a26:	657b      	str	r3, [r7, #84]	; 0x54
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	2240      	movs	r2, #64	; 0x40
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 fab9 	bl	8000fa8 <memset>

	while(num!=0)
 8000a36:	e031      	b.n	8000a9c <LCD_WRITE_NUMBER+0x84>
	{
		count2 = 0 ;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	65bb      	str	r3, [r7, #88]	; 0x58
		temp = num ;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	653b      	str	r3, [r7, #80]	; 0x50

		while(temp >= 10)
 8000a40:	e00a      	b.n	8000a58 <LCD_WRITE_NUMBER+0x40>
		{
			temp = temp/10 ;
 8000a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a44:	4a2f      	ldr	r2, [pc, #188]	; (8000b04 <LCD_WRITE_NUMBER+0xec>)
 8000a46:	fb82 1203 	smull	r1, r2, r2, r3
 8000a4a:	1092      	asrs	r2, r2, #2
 8000a4c:	17db      	asrs	r3, r3, #31
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	653b      	str	r3, [r7, #80]	; 0x50
			count2++;
 8000a52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a54:	3301      	adds	r3, #1
 8000a56:	65bb      	str	r3, [r7, #88]	; 0x58
		while(temp >= 10)
 8000a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a5a:	2b09      	cmp	r3, #9
 8000a5c:	dcf1      	bgt.n	8000a42 <LCD_WRITE_NUMBER+0x2a>

		}
		number[count2] = temp ;
 8000a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000a66:	4413      	add	r3, r2
 8000a68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a6a:	f843 2c54 	str.w	r2, [r3, #-84]
		if(max<count2)
 8000a6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a72:	429a      	cmp	r2, r3
 8000a74:	da0b      	bge.n	8000a8e <LCD_WRITE_NUMBER+0x76>
			max = count2 ;
 8000a76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a78:	657b      	str	r3, [r7, #84]	; 0x54

		while(count2)
 8000a7a:	e008      	b.n	8000a8e <LCD_WRITE_NUMBER+0x76>
		{
			temp = temp*10;
 8000a7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a7e:	4613      	mov	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	653b      	str	r3, [r7, #80]	; 0x50
			count2--;
 8000a88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	65bb      	str	r3, [r7, #88]	; 0x58
		while(count2)
 8000a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1f3      	bne.n	8000a7c <LCD_WRITE_NUMBER+0x64>
		}
		num=num-temp;
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	607b      	str	r3, [r7, #4]
	while(num!=0)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1ca      	bne.n	8000a38 <LCD_WRITE_NUMBER+0x20>


	}
	for(int i = max; i>=0 ;i--)
 8000aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000aa6:	e025      	b.n	8000af4 <LCD_WRITE_NUMBER+0xdc>
	{
		count++;
 8000aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000aaa:	3301      	adds	r3, #1
 8000aac:	65fb      	str	r3, [r7, #92]	; 0x5c
		LCD_WRITE_CHAR((number[i])+48);
 8000aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000ab6:	4413      	add	r3, r2
 8000ab8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	3330      	adds	r3, #48	; 0x30
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff16 	bl	80008f4 <LCD_WRITE_CHAR>
		if (count == 16)
 8000ac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000aca:	2b10      	cmp	r3, #16
 8000acc:	d104      	bne.n	8000ad8 <LCD_WRITE_NUMBER+0xc0>
		{
			LCD_GOTO_XY(2,0);
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	f7ff ff7f 	bl	80009d4 <LCD_GOTO_XY>
 8000ad6:	e00a      	b.n	8000aee <LCD_WRITE_NUMBER+0xd6>
		}else if (count == 32)
 8000ad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ada:	2b20      	cmp	r3, #32
 8000adc:	d107      	bne.n	8000aee <LCD_WRITE_NUMBER+0xd6>
		{
			LCD_clear_screen();
 8000ade:	f7ff fdb1 	bl	8000644 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff ff75 	bl	80009d4 <LCD_GOTO_XY>
			count=0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	65fb      	str	r3, [r7, #92]	; 0x5c
	for(int i = max; i>=0 ;i--)
 8000aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000af0:	3b01      	subs	r3, #1
 8000af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	dad6      	bge.n	8000aa8 <LCD_WRITE_NUMBER+0x90>
		}
	}
}
 8000afa:	bf00      	nop
 8000afc:	3760      	adds	r7, #96	; 0x60
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	66666667 	.word	0x66666667

08000b08 <EXTI0_IRQHandler>:
//-------------------------
//	ISR Functions
//-------------------------

void EXTI0_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= 1<<0 ;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <EXTI0_IRQHandler+0x1c>)
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <EXTI0_IRQHandler+0x1c>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	6153      	str	r3, [r2, #20]
	//	CALL IRQ CallBack
	GP_IRQ_CallBack[0]();
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <EXTI0_IRQHandler+0x20>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4798      	blx	r3

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40010400 	.word	0x40010400
 8000b28:	20000044 	.word	0x20000044

08000b2c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= ( 1 << 0 ) ;
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <EXTI1_IRQHandler+0x1c>)
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <EXTI1_IRQHandler+0x1c>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	6153      	str	r3, [r2, #20]
	//	CALL IRQ CallBack
	GP_IRQ_CallBack[0]() ;
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <EXTI1_IRQHandler+0x20>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4798      	blx	r3

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40010400 	.word	0x40010400
 8000b4c:	20000044 	.word	0x20000044

08000b50 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= ( 1 << 1 ) ;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <EXTI2_IRQHandler+0x1c>)
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <EXTI2_IRQHandler+0x1c>)
 8000b5a:	f043 0302 	orr.w	r3, r3, #2
 8000b5e:	6153      	str	r3, [r2, #20]
	//	CALL IRQ CallBack
	GP_IRQ_CallBack[1]() ;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <EXTI2_IRQHandler+0x20>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	4798      	blx	r3
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40010400 	.word	0x40010400
 8000b70:	20000044 	.word	0x20000044

08000b74 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= ( 1 << 2 ) ;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <EXTI3_IRQHandler+0x1c>)
 8000b7a:	695b      	ldr	r3, [r3, #20]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <EXTI3_IRQHandler+0x1c>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6153      	str	r3, [r2, #20]
	//	CALL IRQ CallBack
	GP_IRQ_CallBack[2]() ;
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <EXTI3_IRQHandler+0x20>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	4798      	blx	r3
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40010400 	.word	0x40010400
 8000b94:	20000044 	.word	0x20000044

08000b98 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= ( 1 << 3 ) ;
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <EXTI4_IRQHandler+0x1c>)
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <EXTI4_IRQHandler+0x1c>)
 8000ba2:	f043 0308 	orr.w	r3, r3, #8
 8000ba6:	6153      	str	r3, [r2, #20]
	//	CALL IRQ CallBack
	GP_IRQ_CallBack[3]() ;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <EXTI4_IRQHandler+0x20>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	4798      	blx	r3
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40010400 	.word	0x40010400
 8000bb8:	20000044 	.word	0x20000044

08000bbc <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	//	CALL IRQ CallBack
	if(EXTI->PR & 1<<5){	EXTI->PR |= ( 1 << 5 ) ;	GP_IRQ_CallBack[5]() ; }
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <EXTI9_5_IRQHandler+0xa0>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	f003 0320 	and.w	r3, r3, #32
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d008      	beq.n	8000bde <EXTI9_5_IRQHandler+0x22>
 8000bcc:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <EXTI9_5_IRQHandler+0xa0>)
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	4a22      	ldr	r2, [pc, #136]	; (8000c5c <EXTI9_5_IRQHandler+0xa0>)
 8000bd2:	f043 0320 	orr.w	r3, r3, #32
 8000bd6:	6153      	str	r3, [r2, #20]
 8000bd8:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <EXTI9_5_IRQHandler+0xa4>)
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	4798      	blx	r3
	if(EXTI->PR & 1<<6){	EXTI->PR |= ( 1 << 6 ) ;	GP_IRQ_CallBack[6]() ; }
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <EXTI9_5_IRQHandler+0xa0>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d008      	beq.n	8000bfc <EXTI9_5_IRQHandler+0x40>
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <EXTI9_5_IRQHandler+0xa0>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	4a1b      	ldr	r2, [pc, #108]	; (8000c5c <EXTI9_5_IRQHandler+0xa0>)
 8000bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf4:	6153      	str	r3, [r2, #20]
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <EXTI9_5_IRQHandler+0xa4>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4798      	blx	r3
	if(EXTI->PR & 1<<7){	EXTI->PR |= ( 1 << 7 ) ;	GP_IRQ_CallBack[7]() ; }
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <EXTI9_5_IRQHandler+0xa0>)
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d008      	beq.n	8000c1a <EXTI9_5_IRQHandler+0x5e>
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <EXTI9_5_IRQHandler+0xa0>)
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <EXTI9_5_IRQHandler+0xa0>)
 8000c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c12:	6153      	str	r3, [r2, #20]
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <EXTI9_5_IRQHandler+0xa4>)
 8000c16:	69db      	ldr	r3, [r3, #28]
 8000c18:	4798      	blx	r3
	if(EXTI->PR & 1<<8){	EXTI->PR |= ( 1 << 8 ) ;	GP_IRQ_CallBack[8]() ; }
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <EXTI9_5_IRQHandler+0xa0>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d008      	beq.n	8000c38 <EXTI9_5_IRQHandler+0x7c>
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <EXTI9_5_IRQHandler+0xa0>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4a0c      	ldr	r2, [pc, #48]	; (8000c5c <EXTI9_5_IRQHandler+0xa0>)
 8000c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c30:	6153      	str	r3, [r2, #20]
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <EXTI9_5_IRQHandler+0xa4>)
 8000c34:	6a1b      	ldr	r3, [r3, #32]
 8000c36:	4798      	blx	r3
	if(EXTI->PR & 1<<9){	EXTI->PR |= ( 1 << 9 ) ;	GP_IRQ_CallBack[9]() ; }
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <EXTI9_5_IRQHandler+0xa0>)
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d008      	beq.n	8000c56 <EXTI9_5_IRQHandler+0x9a>
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <EXTI9_5_IRQHandler+0xa0>)
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <EXTI9_5_IRQHandler+0xa0>)
 8000c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4e:	6153      	str	r3, [r2, #20]
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <EXTI9_5_IRQHandler+0xa4>)
 8000c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c54:	4798      	blx	r3
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40010400 	.word	0x40010400
 8000c60:	20000044 	.word	0x20000044

08000c64 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	//Pending register (EXTI_PR)
	//	This bit is cleared by writing a ‘1’ into the bit.
	//	CALL IRQ CallBack
	if(EXTI->PR & 1<<10){	EXTI->PR |= ( 1 << 10 ) ;	GP_IRQ_CallBack[10]() ; }
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <EXTI15_10_IRQHandler+0xbc>)
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d008      	beq.n	8000c86 <EXTI15_10_IRQHandler+0x22>
 8000c74:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <EXTI15_10_IRQHandler+0xbc>)
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	4a29      	ldr	r2, [pc, #164]	; (8000d20 <EXTI15_10_IRQHandler+0xbc>)
 8000c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7e:	6153      	str	r3, [r2, #20]
 8000c80:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <EXTI15_10_IRQHandler+0xc0>)
 8000c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c84:	4798      	blx	r3
	if(EXTI->PR & 1<<11){	EXTI->PR |= ( 1 << 11 ) ;	GP_IRQ_CallBack[11]() ; }
 8000c86:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <EXTI15_10_IRQHandler+0xbc>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d008      	beq.n	8000ca4 <EXTI15_10_IRQHandler+0x40>
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <EXTI15_10_IRQHandler+0xbc>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a22      	ldr	r2, [pc, #136]	; (8000d20 <EXTI15_10_IRQHandler+0xbc>)
 8000c98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c9c:	6153      	str	r3, [r2, #20]
 8000c9e:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <EXTI15_10_IRQHandler+0xc0>)
 8000ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca2:	4798      	blx	r3
	if(EXTI->PR & 1<<12){	EXTI->PR |= ( 1 << 12 ) ;	GP_IRQ_CallBack[12]() ; }
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <EXTI15_10_IRQHandler+0xbc>)
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d008      	beq.n	8000cc2 <EXTI15_10_IRQHandler+0x5e>
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <EXTI15_10_IRQHandler+0xbc>)
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	4a1a      	ldr	r2, [pc, #104]	; (8000d20 <EXTI15_10_IRQHandler+0xbc>)
 8000cb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cba:	6153      	str	r3, [r2, #20]
 8000cbc:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <EXTI15_10_IRQHandler+0xc0>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	4798      	blx	r3
	if(EXTI->PR & 1<<13){	EXTI->PR |= ( 1 << 13 ) ;	GP_IRQ_CallBack[13]() ; }
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <EXTI15_10_IRQHandler+0xbc>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d008      	beq.n	8000ce0 <EXTI15_10_IRQHandler+0x7c>
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <EXTI15_10_IRQHandler+0xbc>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <EXTI15_10_IRQHandler+0xbc>)
 8000cd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cd8:	6153      	str	r3, [r2, #20]
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <EXTI15_10_IRQHandler+0xc0>)
 8000cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cde:	4798      	blx	r3
	if(EXTI->PR & 1<<14){	EXTI->PR |= ( 1 << 14 ) ;	GP_IRQ_CallBack[14]() ; }
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <EXTI15_10_IRQHandler+0xbc>)
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d008      	beq.n	8000cfe <EXTI15_10_IRQHandler+0x9a>
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <EXTI15_10_IRQHandler+0xbc>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <EXTI15_10_IRQHandler+0xbc>)
 8000cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf6:	6153      	str	r3, [r2, #20]
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <EXTI15_10_IRQHandler+0xc0>)
 8000cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cfc:	4798      	blx	r3
	if(EXTI->PR & 1<<15){	EXTI->PR |= ( 1 << 15 ) ;	GP_IRQ_CallBack[15]() ; }
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <EXTI15_10_IRQHandler+0xbc>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d008      	beq.n	8000d1c <EXTI15_10_IRQHandler+0xb8>
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <EXTI15_10_IRQHandler+0xbc>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <EXTI15_10_IRQHandler+0xbc>)
 8000d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d14:	6153      	str	r3, [r2, #20]
 8000d16:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <EXTI15_10_IRQHandler+0xc0>)
 8000d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1a:	4798      	blx	r3
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40010400 	.word	0x40010400
 8000d24:	20000044 	.word	0x20000044

08000d28 <Get_CRLH_Position>:
//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
//	Generic Functions
//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*


uint8_t Get_CRLH_Position(uint16_t PinNum){
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80fb      	strh	r3, [r7, #6]
	switch (PinNum) {
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	2b80      	cmp	r3, #128	; 0x80
 8000d36:	d042      	beq.n	8000dbe <Get_CRLH_Position+0x96>
 8000d38:	2b80      	cmp	r3, #128	; 0x80
 8000d3a:	dc11      	bgt.n	8000d60 <Get_CRLH_Position+0x38>
 8000d3c:	2b08      	cmp	r3, #8
 8000d3e:	d036      	beq.n	8000dae <Get_CRLH_Position+0x86>
 8000d40:	2b08      	cmp	r3, #8
 8000d42:	dc06      	bgt.n	8000d52 <Get_CRLH_Position+0x2a>
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d02e      	beq.n	8000da6 <Get_CRLH_Position+0x7e>
 8000d48:	2b04      	cmp	r3, #4
 8000d4a:	d02e      	beq.n	8000daa <Get_CRLH_Position+0x82>
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d028      	beq.n	8000da2 <Get_CRLH_Position+0x7a>
 8000d50:	e047      	b.n	8000de2 <Get_CRLH_Position+0xba>
 8000d52:	2b20      	cmp	r3, #32
 8000d54:	d02f      	beq.n	8000db6 <Get_CRLH_Position+0x8e>
 8000d56:	2b40      	cmp	r3, #64	; 0x40
 8000d58:	d02f      	beq.n	8000dba <Get_CRLH_Position+0x92>
 8000d5a:	2b10      	cmp	r3, #16
 8000d5c:	d029      	beq.n	8000db2 <Get_CRLH_Position+0x8a>
 8000d5e:	e040      	b.n	8000de2 <Get_CRLH_Position+0xba>
 8000d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d64:	d033      	beq.n	8000dce <Get_CRLH_Position+0xa6>
 8000d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d6a:	dc09      	bgt.n	8000d80 <Get_CRLH_Position+0x58>
 8000d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d70:	d029      	beq.n	8000dc6 <Get_CRLH_Position+0x9e>
 8000d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d76:	d028      	beq.n	8000dca <Get_CRLH_Position+0xa2>
 8000d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d7c:	d021      	beq.n	8000dc2 <Get_CRLH_Position+0x9a>
 8000d7e:	e030      	b.n	8000de2 <Get_CRLH_Position+0xba>
 8000d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d84:	d027      	beq.n	8000dd6 <Get_CRLH_Position+0xae>
 8000d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d8a:	dc03      	bgt.n	8000d94 <Get_CRLH_Position+0x6c>
 8000d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d90:	d01f      	beq.n	8000dd2 <Get_CRLH_Position+0xaa>
 8000d92:	e026      	b.n	8000de2 <Get_CRLH_Position+0xba>
 8000d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d98:	d01f      	beq.n	8000dda <Get_CRLH_Position+0xb2>
 8000d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d9e:	d01e      	beq.n	8000dde <Get_CRLH_Position+0xb6>
 8000da0:	e01f      	b.n	8000de2 <Get_CRLH_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e01e      	b.n	8000de4 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 8000da6:	2304      	movs	r3, #4
 8000da8:	e01c      	b.n	8000de4 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 8000daa:	2308      	movs	r3, #8
 8000dac:	e01a      	b.n	8000de4 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 8000dae:	230c      	movs	r3, #12
 8000db0:	e018      	b.n	8000de4 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 8000db2:	2310      	movs	r3, #16
 8000db4:	e016      	b.n	8000de4 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 8000db6:	2314      	movs	r3, #20
 8000db8:	e014      	b.n	8000de4 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 8000dba:	2318      	movs	r3, #24
 8000dbc:	e012      	b.n	8000de4 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 8000dbe:	231c      	movs	r3, #28
 8000dc0:	e010      	b.n	8000de4 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e00e      	b.n	8000de4 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	e00c      	b.n	8000de4 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 8000dca:	2308      	movs	r3, #8
 8000dcc:	e00a      	b.n	8000de4 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 8000dce:	230c      	movs	r3, #12
 8000dd0:	e008      	b.n	8000de4 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 8000dd2:	2310      	movs	r3, #16
 8000dd4:	e006      	b.n	8000de4 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 8000dd6:	2314      	movs	r3, #20
 8000dd8:	e004      	b.n	8000de4 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 8000dda:	2318      	movs	r3, #24
 8000ddc:	e002      	b.n	8000de4 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 8000dde:	231c      	movs	r3, #28
 8000de0:	e000      	b.n	8000de4 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr

08000dee <GPIO_Init_ConFig>:


void GPIO_Init_ConFig (GPIO_TypeDef *GPIOx, GPIO_PIN_Config *PinConfig )
{
 8000dee:	b590      	push	{r4, r7, lr}
 8000df0:	b085      	sub	sp, #20
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	// Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* ConfigReg = NULL ;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
	volatile uint8_t Config_PIN = 0 ;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	72fb      	strb	r3, [r7, #11]

	ConfigReg =(PinConfig->pin_number < GPIO_PIN_8 )? &GPIOx->CRL : &GPIOx->CRH ;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	2bff      	cmp	r3, #255	; 0xff
 8000e06:	d801      	bhi.n	8000e0c <GPIO_Init_ConFig+0x1e>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	e001      	b.n	8000e10 <GPIO_Init_ConFig+0x22>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3304      	adds	r3, #4
 8000e10:	60fb      	str	r3, [r7, #12]

	// Clear CNF & MODE
	(*ConfigReg) &= ~(0xF <<Get_CRLH_Position(PinConfig->pin_number)) ;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ff86 	bl	8000d28 <Get_CRLH_Position>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	230f      	movs	r3, #15
 8000e22:	4093      	lsls	r3, r2
 8000e24:	43da      	mvns	r2, r3
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	601a      	str	r2, [r3, #0]

	// PIN is Output
	if((PinConfig->pin_mode == GPIO_MODE_Output_PUSH_PULL) || (PinConfig->pin_mode == GPIO_MODE_Output_OPEN_DRAIN) ||(PinConfig->pin_mode == GPIO_MODE_Output_AF_PUSH_PULL) ||(PinConfig->pin_mode == GPIO_MODE_Output_AF_OPEN_DRAIN))
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	885b      	ldrh	r3, [r3, #2]
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d00b      	beq.n	8000e50 <GPIO_Init_ConFig+0x62>
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	885b      	ldrh	r3, [r3, #2]
 8000e3c:	2b05      	cmp	r3, #5
 8000e3e:	d007      	beq.n	8000e50 <GPIO_Init_ConFig+0x62>
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	885b      	ldrh	r3, [r3, #2]
 8000e44:	2b06      	cmp	r3, #6
 8000e46:	d003      	beq.n	8000e50 <GPIO_Init_ConFig+0x62>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	885b      	ldrh	r3, [r3, #2]
 8000e4c:	2b07      	cmp	r3, #7
 8000e4e:	d10f      	bne.n	8000e70 <GPIO_Init_ConFig+0x82>
	{
		// Set CNF & MODE
		Config_PIN = ((((PinConfig->pin_mode -4 ) << 2) | (PinConfig->pin_speed)) & 0xF);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	885b      	ldrh	r3, [r3, #2]
 8000e54:	3b04      	subs	r3, #4
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	b25a      	sxtb	r2, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	889b      	ldrh	r3, [r3, #4]
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	72fb      	strb	r3, [r7, #11]
 8000e6e:	e026      	b.n	8000ebe <GPIO_Init_ConFig+0xd0>

	}
	else //PIN is Input
	{
		// Input Analog || Input floating
		if((PinConfig->pin_mode == GPIO_MODE_Analog) || (PinConfig->pin_mode == GPIO_MODE_Floating_Input))
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	885b      	ldrh	r3, [r3, #2]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d003      	beq.n	8000e80 <GPIO_Init_ConFig+0x92>
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	885b      	ldrh	r3, [r3, #2]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d108      	bne.n	8000e92 <GPIO_Init_ConFig+0xa4>
		{
			// Set CNF & MODE
			Config_PIN = ((PinConfig->pin_mode << 2) & 0xF) ;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	885b      	ldrh	r3, [r3, #2]
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	f003 030f 	and.w	r3, r3, #15
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	72fb      	strb	r3, [r7, #11]
 8000e90:	e015      	b.n	8000ebe <GPIO_Init_ConFig+0xd0>
		}
		else // Input pull-down || Input pull-up
		{
			// Set CNF & MODE
			Config_PIN = ((GPIO_MODE_Input_PUll_UP << 2) & 0xF) ;
 8000e92:	2308      	movs	r3, #8
 8000e94:	72fb      	strb	r3, [r7, #11]

			if(PinConfig->pin_mode == GPIO_MODE_Input_PUll_DOWN)// Input pull-down
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	885b      	ldrh	r3, [r3, #2]
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d108      	bne.n	8000eb0 <GPIO_Init_ConFig+0xc2>
			{
				//PxODR = 0 Input pull-down :Table 20. Port bit configuration table
				GPIOx->ODR &= ~( PinConfig->pin_number ) ;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	683a      	ldr	r2, [r7, #0]
 8000ea4:	8812      	ldrh	r2, [r2, #0]
 8000ea6:	43d2      	mvns	r2, r2
 8000ea8:	401a      	ands	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	e006      	b.n	8000ebe <GPIO_Init_ConFig+0xd0>
			}
			else // Input pull-up
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR |=  PinConfig->pin_number ;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	8812      	ldrh	r2, [r2, #0]
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// write on the CRL or CRH
	*ConfigReg |= (Config_PIN <<Get_CRLH_Position(PinConfig->pin_number));
 8000ebe:	7afb      	ldrb	r3, [r7, #11]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	461c      	mov	r4, r3
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff2d 	bl	8000d28 <Get_CRLH_Position>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	fa04 f203 	lsl.w	r2, r4, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	601a      	str	r2, [r3, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd90      	pop	{r4, r7, pc}

08000ee6 <GPIO_ReadPin>:
* Note			-none
*/


uint8_t GPIO_ReadPin (GPIO_TypeDef *GPIOx, uint16_t PinNumber )
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b085      	sub	sp, #20
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus ;
	if((( GPIOx->IDR ) & PinNumber) != (uint32_t)GPIO_PIN_RESET )
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	887b      	ldrh	r3, [r7, #2]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d002      	beq.n	8000f04 <GPIO_ReadPin+0x1e>
	{
		bitstatus = GPIO_PIN_SET ;
 8000efe:	2301      	movs	r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
 8000f02:	e001      	b.n	8000f08 <GPIO_ReadPin+0x22>
	}
	else
	{
		bitstatus = GPIO_PIN_RESET ;
 8000f04:	2300      	movs	r3, #0
 8000f06:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus ;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <GPIO_WritePin>:
* @retval 		-none
* Note			-none
*/

void GPIO_WritePin (GPIO_TypeDef *GPIOx, uint16_t PinNumber , uint8_t Value )
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
 8000f20:	4613      	mov	r3, r2
 8000f22:	707b      	strb	r3, [r7, #1]
	if( Value == GPIO_PIN_SET)
 8000f24:	787b      	ldrb	r3, [r7, #1]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d103      	bne.n	8000f32 <GPIO_WritePin+0x1e>
	{
	// Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
	// These bits are write-only and can be accessed in Word mode only.
	// 0: No action on the corresponding ODRx bit
	// 1: Set the corresponding ODRx bit
		GPIOx->BSRR =(uint32_t)PinNumber ;
 8000f2a:	887a      	ldrh	r2, [r7, #2]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	611a      	str	r2, [r3, #16]
	// These bits are write-only and can be accessed in Word mode only.
	// 0: No action on the corresponding ODRx bit
	// 1: Reset the corresponding ODRx bit
		GPIOx->BRR =(uint16_t)PinNumber ;
	}
}
 8000f30:	e002      	b.n	8000f38 <GPIO_WritePin+0x24>
		GPIOx->BRR =(uint16_t)PinNumber ;
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	615a      	str	r2, [r3, #20]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <GPIO_WritePort>:
* @retval 		-none
* Note			-none
*/

void GPIO_WritePort (GPIO_TypeDef *GPIOx, uint16_t Value )
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value ;
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	60da      	str	r2, [r3, #12]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
	...

08000f60 <__libc_init_array>:
 8000f60:	b570      	push	{r4, r5, r6, lr}
 8000f62:	2500      	movs	r5, #0
 8000f64:	4e0c      	ldr	r6, [pc, #48]	; (8000f98 <__libc_init_array+0x38>)
 8000f66:	4c0d      	ldr	r4, [pc, #52]	; (8000f9c <__libc_init_array+0x3c>)
 8000f68:	1ba4      	subs	r4, r4, r6
 8000f6a:	10a4      	asrs	r4, r4, #2
 8000f6c:	42a5      	cmp	r5, r4
 8000f6e:	d109      	bne.n	8000f84 <__libc_init_array+0x24>
 8000f70:	f000 f822 	bl	8000fb8 <_init>
 8000f74:	2500      	movs	r5, #0
 8000f76:	4e0a      	ldr	r6, [pc, #40]	; (8000fa0 <__libc_init_array+0x40>)
 8000f78:	4c0a      	ldr	r4, [pc, #40]	; (8000fa4 <__libc_init_array+0x44>)
 8000f7a:	1ba4      	subs	r4, r4, r6
 8000f7c:	10a4      	asrs	r4, r4, #2
 8000f7e:	42a5      	cmp	r5, r4
 8000f80:	d105      	bne.n	8000f8e <__libc_init_array+0x2e>
 8000f82:	bd70      	pop	{r4, r5, r6, pc}
 8000f84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f88:	4798      	blx	r3
 8000f8a:	3501      	adds	r5, #1
 8000f8c:	e7ee      	b.n	8000f6c <__libc_init_array+0xc>
 8000f8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f92:	4798      	blx	r3
 8000f94:	3501      	adds	r5, #1
 8000f96:	e7f2      	b.n	8000f7e <__libc_init_array+0x1e>
 8000f98:	08000fd0 	.word	0x08000fd0
 8000f9c:	08000fd0 	.word	0x08000fd0
 8000fa0:	08000fd0 	.word	0x08000fd0
 8000fa4:	08000fd4 	.word	0x08000fd4

08000fa8 <memset>:
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4402      	add	r2, r0
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d100      	bne.n	8000fb2 <memset+0xa>
 8000fb0:	4770      	bx	lr
 8000fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8000fb6:	e7f9      	b.n	8000fac <memset+0x4>

08000fb8 <_init>:
 8000fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fba:	bf00      	nop
 8000fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fbe:	bc08      	pop	{r3}
 8000fc0:	469e      	mov	lr, r3
 8000fc2:	4770      	bx	lr

08000fc4 <_fini>:
 8000fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fc6:	bf00      	nop
 8000fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fca:	bc08      	pop	{r3}
 8000fcc:	469e      	mov	lr, r3
 8000fce:	4770      	bx	lr
